diff -Nurp linux-5.13.1.orig/fs/namei.c linux-5.13.1/fs/namei.c
--- linux-5.13.1.orig/fs/namei.c	2021-07-07 20:24:58.000000000 +0800
+++ linux-5.13.1/fs/namei.c	2021-07-19 18:47:05.148646907 +0800
@@ -522,6 +522,12 @@ int inode_permission(struct user_namespa
 }
 EXPORT_SYMBOL(inode_permission);
 
+int __path_permission(const struct path *path, int mask)
+{
+	return security_path_permission(path, mask);
+}
+EXPORT_SYMBOL(__path_permission);
+
 /**
  * path_get - get a reference to a path
  * @path: path to get the reference to
diff -Nurp linux-5.13.1.orig/fs/open.c linux-5.13.1/fs/open.c
--- linux-5.13.1.orig/fs/open.c	2021-07-07 20:24:58.000000000 +0800
+++ linux-5.13.1/fs/open.c	2021-07-19 18:15:22.991579836 +0800
@@ -438,6 +438,10 @@ retry:
 			goto out_path_release;
 	}
 
+	res = security_path_permission(&path, mode|MAY_ACCESS);
+	if (res)
+		goto out_path_release;
+
 	res = inode_permission(mnt_user_ns(path.mnt), inode, mode | MAY_ACCESS);
 	/* SuS v2 requires we report a read only fs too */
 	if (res || !(mode & S_IWOTH) || special_file(inode->i_mode))
diff -Nurp linux-5.13.1.orig/fs/utimes.c linux-5.13.1/fs/utimes.c
--- linux-5.13.1.orig/fs/utimes.c	2021-07-07 20:24:58.000000000 +0800
+++ linux-5.13.1/fs/utimes.c	2021-07-20 17:51:29.848529212 +0800
@@ -6,6 +6,7 @@
 #include <linux/syscalls.h>
 #include <linux/uaccess.h>
 #include <linux/compat.h>
+#include <linux/security.h>
 #include <asm/unistd.h>
 
 static bool nsec_valid(long nsec)
@@ -62,8 +63,10 @@ int vfs_utimes(const struct path *path,
 	}
 retry_deleg:
 	inode_lock(inode);
-	error = notify_change(mnt_user_ns(path->mnt), path->dentry, &newattrs,
-			      &delegated_inode);
+	error = security_path_utimes(path, times); 
+	if (!error)
+		error = notify_change(mnt_user_ns(path->mnt), path->dentry, &newattrs,
+				&delegated_inode);
 	inode_unlock(inode);
 	if (delegated_inode) {
 		error = break_deleg_wait(&delegated_inode);
diff -Nurp linux-5.13.1.orig/fs/xattr.c linux-5.13.1/fs/xattr.c
--- linux-5.13.1.orig/fs/xattr.c	2021-07-07 20:24:58.000000000 +0800
+++ linux-5.13.1/fs/xattr.c	2021-07-20 17:47:23.185057252 +0800
@@ -592,8 +592,11 @@ retry:
 		return error;
 	error = mnt_want_write(path.mnt);
 	if (!error) {
-		error = setxattr(mnt_user_ns(path.mnt), path.dentry, name,
+		error = security_path_setxattr(mnt_user_ns(path.mnt), &path, name,
 				 value, size, flags);
+		if (!error)
+			error = setxattr(mnt_user_ns(path.mnt), path.dentry, name,
+					value, size, flags);
 		mnt_drop_write(path.mnt);
 	}
 	path_put(&path);
diff -Nurp linux-5.13.1.orig/include/linux/fs.h linux-5.13.1/include/linux/fs.h
--- linux-5.13.1.orig/include/linux/fs.h	2021-07-07 20:24:58.000000000 +0800
+++ linux-5.13.1/include/linux/fs.h	2021-07-19 17:55:41.270525772 +0800
@@ -3004,14 +3004,26 @@ static inline int bmap(struct inode *ino
 int notify_change(struct user_namespace *, struct dentry *,
 		  struct iattr *, struct inode **);
 int inode_permission(struct user_namespace *, struct inode *, int);
+int __path_permission(const struct path *path, int mask);
 int generic_permission(struct user_namespace *, struct inode *, int);
 static inline int file_permission(struct file *file, int mask)
 {
+	int retval = 0;
+
+	retval = __path_permission(&(file->f_path), mask);
+	if (retval)
+		return retval;
 	return inode_permission(file_mnt_user_ns(file),
 				file_inode(file), mask);
 }
 static inline int path_permission(const struct path *path, int mask)
 {
+	int retval = 0;
+
+	retval = __path_permission(path, mask);
+	if (retval)
+		return retval;
+
 	return inode_permission(mnt_user_ns(path->mnt),
 				d_inode(path->dentry), mask);
 }
diff -Nurp linux-5.13.1.orig/include/linux/lsm_hook_defs.h linux-5.13.1/include/linux/lsm_hook_defs.h
--- linux-5.13.1.orig/include/linux/lsm_hook_defs.h	2021-07-07 20:24:58.000000000 +0800
+++ linux-5.13.1/include/linux/lsm_hook_defs.h	2021-07-20 15:58:33.557738453 +0800
@@ -135,11 +135,16 @@ LSM_HOOK(int, 0, inode_readlink, struct
 LSM_HOOK(int, 0, inode_follow_link, struct dentry *dentry, struct inode *inode,
 	 bool rcu)
 LSM_HOOK(int, 0, inode_permission, struct inode *inode, int mask)
+LSM_HOOK(int, 0, path_permission, const struct path *path, int mask)
 LSM_HOOK(int, 0, inode_setattr, struct dentry *dentry, struct iattr *attr)
 LSM_HOOK(int, 0, inode_getattr, const struct path *path)
 LSM_HOOK(int, 0, inode_setxattr, struct user_namespace *mnt_userns,
 	 struct dentry *dentry, const char *name, const void *value,
 	 size_t size, int flags)
+LSM_HOOK(int, 0, path_setxattr, struct user_namespace *mnt_userns,
+	 struct path *path, const char *name, const void *value,
+	 size_t size, int flags)
+LSM_HOOK(int, 0, path_utimes, const struct path *path, struct timespec64 *times)
 LSM_HOOK(void, LSM_RET_VOID, inode_post_setxattr, struct dentry *dentry,
 	 const char *name, const void *value, size_t size, int flags)
 LSM_HOOK(int, 0, inode_getxattr, struct dentry *dentry, const char *name)
diff -Nurp linux-5.13.1.orig/include/linux/security.h linux-5.13.1/include/linux/security.h
--- linux-5.13.1.orig/include/linux/security.h	2021-07-07 20:24:58.000000000 +0800
+++ linux-5.13.1/include/linux/security.h	2021-07-20 15:57:32.389472134 +0800
@@ -356,6 +356,12 @@ int security_inode_getattr(const struct
 int security_inode_setxattr(struct user_namespace *mnt_userns,
 			    struct dentry *dentry, const char *name,
 			    const void *value, size_t size, int flags);
+
+int security_path_setxattr(struct user_namespace *mnt_userns,
+			    struct path *path, const char *name,
+			    const void *value, size_t size, int flags);
+int security_path_utimes(const struct path *path, struct timespec64 *times);
+
 void security_inode_post_setxattr(struct dentry *dentry, const char *name,
 				  const void *value, size_t size, int flags);
 int security_inode_getxattr(struct dentry *dentry, const char *name);
@@ -869,6 +875,18 @@ static inline int security_inode_setxatt
 	return cap_inode_setxattr(dentry, name, value, size, flags);
 }
 
+static inline int security_path_setxattr(struct user_namespace *mnt_userns,
+		struct path *path, const char *name, const void *value,
+		size_t size, int flags)
+{
+	return 0;
+}
+
+int security_path_utimes(const struct path *path, struct timespec64 *times)
+{
+	return 0;
+}
+
 static inline void security_inode_post_setxattr(struct dentry *dentry,
 		const char *name, const void *value, size_t size, int flags)
 { }
@@ -1757,6 +1775,7 @@ static inline void security_skb_classify
 #endif	/* CONFIG_SECURITY_NETWORK_XFRM */
 
 #ifdef CONFIG_SECURITY_PATH
+int security_path_permission(const struct path *path, int mask);
 int security_path_unlink(const struct path *dir, struct dentry *dentry);
 int security_path_mkdir(const struct path *dir, struct dentry *dentry, umode_t mode);
 int security_path_rmdir(const struct path *dir, struct dentry *dentry);
@@ -1774,6 +1793,10 @@ int security_path_chmod(const struct pat
 int security_path_chown(const struct path *path, kuid_t uid, kgid_t gid);
 int security_path_chroot(const struct path *path);
 #else	/* CONFIG_SECURITY_PATH */
+static inline int security_path_permission(const struct path *path, int mask)
+{
+	return 0;
+}
 static inline int security_path_unlink(const struct path *dir, struct dentry *dentry)
 {
 	return 0;
diff -Nurp linux-5.13.1.orig/security/landlock/fs.c linux-5.13.1/security/landlock/fs.c
--- linux-5.13.1.orig/security/landlock/fs.c	2021-07-07 20:24:58.000000000 +0800
+++ linux-5.13.1/security/landlock/fs.c	2021-07-21 15:50:00.768842515 +0800
@@ -329,6 +329,34 @@ static void hook_inode_free_security(str
 	WARN_ON_ONCE(landlock_inode(inode)->object);
 }
 
+static int hook_inode_getattr(const struct path *path)
+{
+	const struct landlock_ruleset *const dom =
+		landlock_get_current_domain();
+
+	if (!dom)
+		return 0;
+
+	if (S_ISDIR(d_inode(path->dentry)->i_mode))
+		return check_access_path(dom, path,  LANDLOCK_ACCESS_FS_READ_DIR);
+	return check_access_path(dom, path,  LANDLOCK_ACCESS_FS_READ_FILE);
+}
+
+static int hook_path_setxattr(struct user_namespace *mnt_userns,
+                               struct path *path, const char *name,
+                              const void *value, size_t size, int flags)
+{
+	const struct landlock_ruleset *const dom =
+		landlock_get_current_domain();
+
+	if (!dom)
+		return 0;
+
+	if (S_ISDIR(d_inode(path->dentry)->i_mode))
+		return check_access_path(dom, path,  LANDLOCK_ACCESS_FS_MAKE_DIR);
+	return check_access_path(dom, path,  LANDLOCK_ACCESS_FS_WRITE_FILE);
+}
+
 /* Super-block hooks */
 
 /*
@@ -629,6 +657,132 @@ static int hook_path_rmdir(const struct
 	return current_check_access_path(dir, LANDLOCK_ACCESS_FS_REMOVE_DIR);
 }
 
+static int hook_path_chmod(const struct path *path, umode_t mode)
+{
+	if (S_ISDIR(d_inode(path->dentry)->i_mode))
+		return current_check_access_path(path, LANDLOCK_ACCESS_FS_MAKE_DIR);
+	return current_check_access_path(path, LANDLOCK_ACCESS_FS_WRITE_FILE);
+}
+
+static int hook_path_chown(const struct path *path, kuid_t uid, kgid_t gid)
+{
+	if (S_ISDIR(d_inode(path->dentry)->i_mode))
+		return current_check_access_path(path, LANDLOCK_ACCESS_FS_MAKE_DIR);
+	return current_check_access_path(path, LANDLOCK_ACCESS_FS_WRITE_FILE);
+}
+
+static int hook_path_utimes(const struct path *path, struct timespec64 *times)
+{
+	if (S_ISDIR(d_inode(path->dentry)->i_mode))
+		return current_check_access_path(path, LANDLOCK_ACCESS_FS_MAKE_DIR);
+	return current_check_access_path(path, LANDLOCK_ACCESS_FS_WRITE_FILE);
+}
+
+static int hook_path_truncate(const struct path *path)
+{
+	if (S_ISDIR(d_inode(path->dentry)->i_mode))
+		return current_check_access_path(path, LANDLOCK_ACCESS_FS_MAKE_DIR);
+	return current_check_access_path(path, LANDLOCK_ACCESS_FS_WRITE_FILE);
+}
+
+static int hook_file_lock(struct file *file, unsigned int cmd)
+{
+	if (S_ISDIR(file_inode(file)->i_mode))
+		return current_check_access_path(&(file->f_path), LANDLOCK_ACCESS_FS_READ_DIR);
+	return current_check_access_path(&(file->f_path), LANDLOCK_ACCESS_FS_READ_FILE);
+}
+
+static u32 get_fcntl_access(unsigned int cmd)
+{
+	u32 ret = 0;
+
+	switch (cmd) {
+	case F_DUPFD:
+	case F_DUPFD_CLOEXEC:
+		ret = LANDLOCK_ACCESS_FS_EXECUTE;
+		break;
+	case F_GETFD:
+	case F_GETFL:
+#if BITS_PER_LONG != 32
+	/* 32-bit arches must use fcntl64() */
+	case F_OFD_GETLK:
+#endif
+	case F_GETLK:
+	case F_GETOWN:
+	case F_GETOWN_EX:
+	case F_GETOWNER_UIDS:
+	case F_GETSIG:
+	case F_GETLEASE:
+	case F_NOTIFY:
+	case F_GETPIPE_SZ:
+	case F_GET_SEALS:
+	case F_GET_RW_HINT:
+	case F_GET_FILE_RW_HINT:
+		ret = LANDLOCK_ACCESS_FS_READ_FILE;
+		break;
+
+	case F_SETFD:
+	case F_SETFL:
+#if BITS_PER_LONG != 32
+	/* 32-bit arches must use fcntl64() */
+	case F_OFD_SETLK:
+	case F_OFD_SETLKW:
+#endif
+	case F_SETLK:
+	case F_SETLKW:
+	case F_SETOWN:
+	case F_SETOWN_EX:
+	case F_SETSIG:
+	case F_SETLEASE:
+	case F_SETPIPE_SZ:
+	case F_ADD_SEALS:
+	case F_SET_RW_HINT:
+	case F_SET_FILE_RW_HINT:
+		ret = LANDLOCK_ACCESS_FS_WRITE_FILE;
+		break;
+	default:
+		break;
+	}
+	return ret;
+}
+
+static int hook_file_fcntl(struct file *file, unsigned int cmd, unsigned long arg)
+{
+	u32 access = get_fcntl_access(cmd);
+	if (S_ISDIR(file_inode(file)->i_mode))
+		return 0;
+	return current_check_access_path(&(file->f_path), access);
+}
+
+static int hook_file_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
+{
+	return 0;
+#if 0
+	if (S_ISDIR(file_inode(file)->i_mode))
+		return current_check_access_path(&(file->f_path), LANDLOCK_ACCESS_FS_MAKE_DIR);
+	return current_check_access_path(&(file->f_path), LANDLOCK_ACCESS_FS_WRITE_FILE);
+#endif
+}
+
+static int hook_path_permission(const struct path *path, int mask)
+{
+	if (S_ISDIR(d_inode(path->dentry)->i_mode)) {
+		if (mask & (MAY_EXEC|MAY_CHDIR))
+			return current_check_access_path(path, LANDLOCK_ACCESS_FS_EXECUTE);
+		if (mask & (MAY_READ|MAY_ACCESS))
+			return current_check_access_path(path, LANDLOCK_ACCESS_FS_READ_DIR);
+		if (mask & MAY_WRITE)
+			return current_check_access_path(path, LANDLOCK_ACCESS_FS_MAKE_DIR);
+	} else {
+		if (mask & (MAY_READ|MAY_ACCESS))
+			return current_check_access_path(path, LANDLOCK_ACCESS_FS_READ_FILE);
+		if (mask & (MAY_WRITE|MAY_APPEND))
+			return current_check_access_path(path, LANDLOCK_ACCESS_FS_WRITE_FILE);
+	}
+
+	return 0;
+}
+
 /* File hooks */
 
 static inline u32 get_file_access(const struct file *const file)
@@ -649,6 +803,23 @@ static inline u32 get_file_access(const
 	return access;
 }
 
+static int check_access_parent_path(const struct landlock_ruleset *const dom,
+		const struct path *const path, u32 access_request)
+{
+	struct path p_path;
+	struct dentry *d_parent = NULL;
+	int retval = 0;
+
+	d_parent = dget_parent(path->dentry);
+	p_path.mnt = path->mnt;
+	p_path.dentry =  d_parent;
+
+	retval = check_access_path(dom, &p_path, access_request);
+	dput(d_parent);
+
+	return retval;
+}
+
 static int hook_file_open(struct file *const file)
 {
 	const struct landlock_ruleset *const dom =
@@ -661,11 +832,16 @@ static int hook_file_open(struct file *c
 	 * return 0.  This case will be handled with a future Landlock
 	 * evolution.
 	 */
+	if (file->f_flags & O_PATH) 
+		return check_access_parent_path(dom, &file->f_path, LANDLOCK_ACCESS_FS_EXECUTE);
+
 	return check_access_path(dom, &file->f_path, get_file_access(file));
 }
 
 static struct security_hook_list landlock_hooks[] __lsm_ro_after_init = {
 	LSM_HOOK_INIT(inode_free_security, hook_inode_free_security),
+	LSM_HOOK_INIT(inode_getattr, hook_inode_getattr),
+	LSM_HOOK_INIT(path_setxattr, hook_path_setxattr),
 
 	LSM_HOOK_INIT(sb_delete, hook_sb_delete),
 	LSM_HOOK_INIT(sb_mount, hook_sb_mount),
@@ -681,6 +857,15 @@ static struct security_hook_list landloc
 	LSM_HOOK_INIT(path_symlink, hook_path_symlink),
 	LSM_HOOK_INIT(path_unlink, hook_path_unlink),
 	LSM_HOOK_INIT(path_rmdir, hook_path_rmdir),
+	LSM_HOOK_INIT(path_chmod, hook_path_chmod),
+	LSM_HOOK_INIT(path_chown, hook_path_chown),
+	LSM_HOOK_INIT(path_truncate, hook_path_truncate),
+	LSM_HOOK_INIT(file_lock, hook_file_lock),
+	LSM_HOOK_INIT(file_fcntl, hook_file_fcntl),
+	LSM_HOOK_INIT(file_ioctl, hook_file_ioctl),
+	LSM_HOOK_INIT(path_utimes, hook_path_utimes),
+
+	LSM_HOOK_INIT(path_permission, hook_path_permission),
 
 	LSM_HOOK_INIT(file_open, hook_file_open),
 };
diff -Nurp linux-5.13.1.orig/security/security.c linux-5.13.1/security/security.c
--- linux-5.13.1.orig/security/security.c	2021-07-07 20:24:58.000000000 +0800
+++ linux-5.13.1/security/security.c	2021-07-20 17:51:57.694378449 +0800
@@ -1123,6 +1123,20 @@ int security_old_inode_init_security(str
 EXPORT_SYMBOL(security_old_inode_init_security);
 
 #ifdef CONFIG_SECURITY_PATH
+int security_path_permission(const struct path *path, int mask)
+{
+	if (unlikely(IS_PRIVATE(d_backing_inode(path->dentry))))
+		return 0;
+	return call_int_hook(path_permission, 0, path, mask);
+}
+
+int security_path_utimes(const struct path *path, struct timespec64 *times)
+{
+	if (unlikely(IS_PRIVATE(d_backing_inode(path->dentry))))
+		return 0;
+	return call_int_hook(path_utimes, 0, path, times);
+}
+
 int security_path_mknod(const struct path *dir, struct dentry *dentry, umode_t mode,
 			unsigned int dev)
 {
@@ -1357,6 +1371,17 @@ int security_inode_setxattr(struct user_
 	return evm_inode_setxattr(dentry, name, value, size);
 }
 
+int security_path_setxattr(struct user_namespace *mnt_userns,
+			    struct path *path, const char *name,
+			    const void *value, size_t size, int flags)
+{
+	if (unlikely(IS_PRIVATE(d_backing_inode(path->dentry))))
+		return 0;
+	return call_int_hook(path_setxattr, 0, mnt_userns, path, name, value,
+			    size, flags);
+
+}
+
 void security_inode_post_setxattr(struct dentry *dentry, const char *name,
 				  const void *value, size_t size, int flags)
 {
